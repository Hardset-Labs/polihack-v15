In this video, I'll show you how to build a simple Django application as fast as possible. Afterwards, you'll know how to set up a Django project, how to configure URLs, how to create a simple database model, and how to display dynamic data using templates. In case you aren't aware, Django is a powerful web framework for Python that's been used to build websites like Instagram, Spotify, and Dropbox. With that said, let's get started, after a quick word from the sponsor of this video. I've got some great news for you guys. Recently, I've got to know a fantastic team who created a free tool that can supercharge your development journey, especially if you work with Django. Now, this company is called AppTension, and they've sponsored this video so that I can tell you about their SaaS boilerplate. Picture this, you've got a brilliant idea, but you're dreading the hours or weeks of coding that lies ahead just to get the project set up. Now, that's where SaaS boilerplate comes in. This is not just a fancy name, this is a tool that literally removes all of that tedious work and lets you dive in right to the heart of your project. Now, this comprehensive kit covers everything your SaaS application needs. Front-end, back-end, API, scalable AWS-based architecture, an intuitive admin panel, workers, it's all there. It even includes essential ready-to-use features like authentication, notifications, and yes, even payment and subscription systems with a Stripe integration. And for you content wizards out there, there's a CMS integration with Contentful. What's more, the team behind this actually has a dedicated Discord community that you can join to get any assistance that you need. So why spend the weeks setting up your code base when you could be working on a core product and building features that provide users real value? Check out SaaS boilerplate from the link in the description and get started today skipping through all of those tedious setup steps. All right, so let's begin here by setting up Django. To do that, we're going to open some kind of directory. You can see I have this demo directory opened in Visual Studio Code, and we're going to get into a terminal environment. I just opened the terminal in VS Code. Obviously, you need Python installed, and once you've installed Python, we're going to type pip install and then Django in our terminal to install the Django package. Now, if you're on Mac or Linux, you can type pip 3 install Django, and once Django is installed, we can create a Django project. Now, restart your terminal if you're working in the same one, and then type the command Django admin start project, the name of the project, which in this case can be something like demo. When you do that, you'll see that it will generate a new directory for you that contains a bunch of files that are pre-generated by Django. Let me walk through what these files do, and then we can create a Django application. So the first file we have here is a nit.py. Now, a nit.py is a special file that tells Python to treat this directory like a Python package. Next, we have ASGI and WSGI. These are special configuration files that we don't need to deal with. These are going to allow Django to actually communicate with the web server. We then have a settings.py file. Straightforward, this contains a bunch of different settings. We'll go in here quite often when we need to install different Django applications, install plugins, change some of our middleware, and do things like modify our database engines. If you're not aware, Django is compatible with many different databases, and you can configure all of that type of stuff inside of this settings file. We then have a urls.py file. This file will allow us to configure different URL routes that we can then kind of route or direct to different Django applications, which I'll get into in one second. Next, we have a manage.py file. This is a special file, again, that actually acts as a command line tool that allows us to run special commands to do things like make database migrations, run our Python server, and all kinds of other things like creating users for our Django admin panel, which we'll get into in one minute. All right, so now let's quickly talk about Django applications. So right now, we have something known as a Django project. The Django project has these main files that I just discussed, but if we actually want to have any executable code or be able to see a kind of website appearing, we need to create something known as a Django app. Now, a Django app is meant to be a standalone application that you can plug and play, meaning I can take it out of this Django project and put it into another Django project. These apps contain things like database models, different views or routes, templates, all kinds of other stuff we can have inside of our applications. So what we need to do whenever we're working with Django is create an app. So to make an app, what we're going to do is go to our terminal. We're going to cd into the directory where we have our now Django project, which is called demo, and we're going to run the command python manage.py and then create app. And actually, that's going to be start app. Then we're going to put the name of the app. In this case, I can just do something like my app. When I do, this is going to create an application inside of here called my app, which contains a bunch of different files, which we're going to work in in just one second. Now, once we've created this application, we actually need to link this to our Django project. To do that, we need to go into this main folder, which is the same name of our project, go to settings.py, scroll down to where we see installed applications, and then place a string containing the name of our new app. In this case, it's going to be my app. This will essentially install the application and allow our Django project to now view any of the code we put in this app. Now, just to clarify apps a little bit more, we can have different apps for different purposes. So we may have an app for authentication, we may have an app for specific user types, so maybe admins or moderators, we may have an app that allows us to view the main content of our website. There's all kinds of different applications we can create. And we can separate different logic into different applications where it makes sense to do so. Now that we've created this app, what we want to do is go into the app and start creating some simple URLs and some roots. So first of all, let's just have a look at some of the files we have inside of here. So again, init.py, we've talked about that. Admin.py, this allows us to register database models so we can view them on our admin panel. We have apps.py, which we don't need to worry about. Models.py, where we'll place our database models. Tests, where we can write some automated test cases. And then views, which is mainly where we'll work, where we'll create different views or roots that we can access on our website. For now though, I actually want to create a new file here called urls.py. This is where we'll place different URL roots and then connect them to our views. So let's go into views here and create a simple view just so we can test how things work. So to create a view or a root, what we're going to do is type define, so we're going to create a function. We'll give this a name, something like home. We're going to take in the request object as a parameter, which will allow us to access things like query parameters and the body of different requests that are being sent to this function. And then from here, we're going to return some type of response. Now we can render some HTML templates, which I'm going to show you in one second, or we can actually return an HTTP response. So I'm going to import at the top of my program here, HTTP response, and I'm going to go return HTTP response like that. And inside of here, I'm just going to return a string, which is hello world. This just allows us to return some very simple data, which we can then display on the website. So now that we have this view, which is simply a function that returns some kind of response, we need to actually connect this to our application through a root or a URL. To do that, we'll go to this newly created urls.py file inside of our application. Notice we have one here and we have one inside of our project. Now inside of here, what we need to do is create some URLs. So we're going to say from django.urls import path, we're then going to say from dot import views, and we're going to import this views.py file that we have here. Now we're going to specify a variable which is URL patterns, we're going to make this equal to a list. And inside of here, we're going to specify paths that will connect a URL pattern to a specific path or view. So for now, I'm going to put an empty path, which just means we go to the root kind of URL of our website, I shouldn't have said root kind of the base URL of our website, we're going to connect this to the views.home view or function, then we're going to specify that this has a name of home. Essentially, what this means is when we go to this kind of empty string path here, we're going to call the views.home function, which is this view, which will then return this HTTP response, which will allow us to view that. Okay, so that's great. We've now configured the URL within our application. However, we also need to configure the URL to our application. I know this seems a bit weird, but let's go inside of demo now, go to urls.py. And we're going to create a URL route that allows us to connect to our application. So here, inside of demo, we have all of the base routes or URLs for our entire project, we then need to kind of create a URL here that will link into our specific applications. You'll see why this is important in one second. But for now, let's create that link. So we're going to say path, we're going to put an empty string here. And then we're going to use this function include, which will import from right here. Inside of include, we're going to specify the name of our application, which actually in this case is my app dots, and then URLs. Now all this is going to say is that whenever I go to this empty string, I want to forward all of the different URLs or routes into my apps dot URLs, where they will then be handled here. So to give you a better example, let's imagine I did something like my app slash. If I did that, now what would happen is whenever I go to my app slash in my URL bar or my address bar, it would then take the remaining part of this URL and forward that into this route right here. Meaning if I wanted to access my homepage, I would now need to go to my website domain, and then my app slash like that. If I go there, then anything after this slash is going to be passed into this URLs file, where it will then be handled here. Meaning if I had something like home here, then what I would need to do to access that route is type my app slash home. So the home component, so the next kind of part of the route will be handled here, whereas the main part will be handled by this main application. Now this is cool because this allows us to have different prefixes for our different applications and have similar URLs within different applications that can still be accessed because we have this main prefix. Hopefully that makes sense, but for now we're just going to make this an empty string. We're going to remove this, and we'll go back here and make this an empty string as well, so we're able to view this route. Now that we've done this, let's run our application and make sure all this works, then move on to some templates and databases. So to do this, we are going to type python manage.py and then run server. Now when we run the server here, you can see that we're getting an error. Don't worry about that, we'll fix that in one second. For now, I'm going to look at the URL here, which is the URL that is running our server, so localhost port 8000. I'm going to press on control and then press that. I also could just type that into my address bar, and you'll see that I get hello world appearing on my screen. Okay, all of that is great, and to stop the server I'm going to hit ctrl c on my keyboard. Now what I want to do is show you how we can use something known as a template. So a template is essentially a reusable html file that allows us to display dynamic data. Now we can have templates that inherit from other templates. I'm going to quickly show you how that works. So to do that, what we need to do is create a templates folder inside of our application. So I'm going to go to my app, I'm going to create a folder called templates. Very important that you name it templates. If you don't name it templates, this won't work. Inside of templates, we're going to create a new file called base.html. Inside of here, we can use something known as the Jenga templating engine, which allows us to display dynamic data. Now I'm just going to paste in the template here because I don't want to write all of it out in this video considering we're trying to go fast. Now what this is, is a simple html document that has a bootstrap nav bar, and I just want to show you how the template works. Now inside of these templates, we can create things known as blocks. These blocks are overridable pieces of content. So I have a block title, I'm ending the block here, meaning I can then override this title in another template. Continuing, I go down here and I have block content and end block, meaning I can inherit from this template, get all of the code that's inside of here, so I get the nav bar, and then I can change whatever is inside of these different blocks. To illustrate that, let's make another template here called home.html. Inside of home, we're going to paste in some template code here. So let me just grab this and finish this off. So type end block here, and we're going to put a paragraph tag saying this is the home page, and then end our paragraph tag. Now what this does is extend the base.html template, meaning all of the code that exists inside of base.html, we're going to import here so we can have a consistent style for all of the different pages in our website without having to rewrite all of that code. We're then going to override the content that exists inside of our blocks. So for the block title, we're going to put home page. For our content block, we're simply going to put a paragraph tag that says this is the home page. That's great, we now have our templates. Now that we've done that, we simply need to render the template. To render the template, we're going to go to our views file inside of our application, and we're going to use this render function. For the render function, we're going to pass request, which is right here as the first argument. We're then going to pass the name of our template, which is home.html. Again, this only works if you have it inside of the templates directory. Now that we've done that, we can rerun our server and we can view this template. So let's run that. Again, ignore the error for now, and you can see that when I have a look at my website, I get this kind of nav bar appearing, and then I get this is the home page inside of my content block. Now that we've done that, let's have a quick look at databases. All right, so I've opened up this models.py file inside of my my app application. What we're going to do now is create a database model that we can then access and use from Django. Now Django is great because it provides something known as an ORM, which is an object relational mapping. This means that we can write Python code to create different database models and then have whatever models we create be automatically made for us in some kind of structured database schema like SQLite 3. So you'll actually see that as we start creating these models, what will happen is we'll make something known as a migration. This migration is actually automated code that will then go and create the corresponding model in something like SQL, MongoDB, or whatever it is that we're using as our database backend engine. You don't need to understand this fully, but for now I'm going to paste in a simple database model. You can see that I have a to-do item, this is a model, and we have different fields on the model which are written as Python attributes. We have a character field and a boolean field. Obviously we can get much more complicated and do things like references, but I don't have time for that in this video. So we've created a simple database model. What I need to do now is register this model with my admin panel which we're going to look at in one minute, and then I need to apply something known as a migration so that we actually have this model existing in our SQLite 3 database. So what I'm going to do here is go to admin.py. Admin.py is the file where we can register different models so that they will appear inside of our admin panel, allowing us to modify and view them. So what I'm going to do is type from.models import to-do item which is the model that we created. You can import other models here as well. We're going to type admin.site.register and then we're going to put the to-do item here. Now when we run our application and we go to the admin panel, which we're going to do in one second, we'll be able to view this model. Okay, now that we've done that, what we need to do is make our migrations. So anytime you make a change to your database models, you need to make something known as a migration. Now this migration again is some automated code which Django will apply to the database which allows you to change your models and update them while kind of maintaining that data and ensuring that if data already exists in the database, you're not going to break that or remove that when you make a change to the database schema. The way you do this is you type python manage.py and then make migrations. You need to run this any single time you make a change to any of your database models. After that, you're going to type python manage.py and then migrate if I can spell this correctly. Now when you type migrate, this is going to actually apply the migrations and update the database for you. So now you'll see when we rerun our application, we'll no longer get that error because we've made the correct migrations here to our database. So this is something that a lot of people get confused with. Pretty much anytime you make a change here, so you add another attribute, you add another model, etc. Run, make migrations, apply the migrations, and then Django will automatically handle all of the operations on your database so that you don't need to deal with them yourself. All right, so now that we have this database model, let's see how we can do some operations with it. So what I'm going to do now is go in and create a new view. Now what this view is going to do is render a template that will view all of the different to-do list items that we have. So actually, let's first go and make a template. I'm going to call this todos.html. Inside of here, I'm going to paste something. Feel free to pause the video and have a look at it, but I will briefly explain it. So inside of here, you can see that we're extending from the base template, we're overriding the block content, and we're actually using a for loop within this template, which is something that is valid. What we do here is we render different list items for every single entry in our to-dos, which is a variable we can pass into this template. Then we can access an attribute on this variable, which is a Python dictionary. We do that using this double curly braces. Anything that you embed inside of double curly braces here will be treated as a variable that you are kind of extracting and viewing as the actual value, rather than some HTML content. So whenever you're using a variable, use two sets of curly braces. Then what we're doing is running an if statement. We're saying if the to-do list item is completed, render completed, otherwise render not completed. Then we are ending the for loop block, and we are ending the content block. There's a lot of other cool stuff you can do here, but this is the basics on conditional rendering and doing kind of block rendering or multiple rendering based on some type of variable you pass inside of here. So now what we need to do is go to views, and we need to create a view that renders that template. So we're going to say define to-dos, we're going to take in our request, and we're going to return a render. We are going to render the request, if we can type this correctly, this is going to be to-dos.html. And now what we need to do is pass a Python dictionary that contains the variables or the key mapping pairs that we want to view inside of here. So in this case, I want to pass to-dos. So what I'm going to do is put a dictionary, I'm going to say to-dos, and then I want to view all of my to-do list items. Now how do I view all of my to-do list items? Well, I need to query them from my database. Fortunately, since we have the ORM, we can do that quite quickly. So we can say from.models, imports, to-do item, and then we can access all of the instances of our to-do item. So to do that, I'll say to-dos, or actually I can't do that because it's a variable, I'll just say items is equal to to-do item.objects.all. This is going to get all of the different objects that exist inside of this database field, then I can simply pass them here as a list object. So I'll say to-dos is equal to items. Now I'm successfully rendering this template. Now what I need to do is create a URL for this template or for this route. To do that, I'm going to go to URLs, and I'm going to create a path. For the path, this time we'll put to-dos slash like that. Then we're going to say views.to-dos, and we'll say the name is to-dos. Okay, so now assuming everything is successful, we should be able to go to to-dos and view all of our different to-dos, although we don't currently have any. So if I go here to slash to-dos, you can see that we get a to-do list header, but it doesn't contain any items. Now we're going to quickly look at the Django admin panel, and then you will see how we can view those different items. Alright, so now we're talking about the Django admin panel. Now this is a special thing that's provided by Django, which allows us to manage users in different database models. It's quite useful and requires minimal configuration. What we need to do if we want to work with the Django admin panel is create a user. So we're going to type python manage.py and then create super user. When we do that, it's going to prompt us for a username and password. We don't need to do the email. I'll just type in a password here. Make sure you remember it. Once you create this user, then what you can do is run your application. So python manage.py run server. You can go into your main URL here, so we have that open, and then type slash admin. When you type slash admin, it will bring you to a pre-built admin dashboard where you can then sign in with your credentials. So I'll type in my password here and be brought to this page. Now notice it shows me the different database models from my various apps. We also have groups and users, which we're not looking at now. We have access to to-do items, so I'll go to to-do items and I can press add. Now I can actually modify my different items. So I can do something like my item and mark that as completed. Let's do one more, another item, and mark that as not completed. Now that we've done that, we can go back to slash to-dos, and you'll see that we have the two different to-do list items appearing, and those will be saved persistently inside of our SQLite database, which is running locally, but we could actually host and kind of have, you know, a more persistent database that's not just a file on our computer. All right, so with that said, I'm going to wrap up the video here. This was the fastest I could possibly show you Django without skipping over a ton of details. Now obviously there is a bunch more stuff to learn. If you'd like to learn that, I have entire comprehensive tutorials on this channel, and actually an entire Django course that is completely free, so feel free to check that out. With that said, if you enjoyed the video, make sure you leave a like, subscribe to the channel, and I look forward to seeing you in another one.